#include<stdlib.h>
#include<stdio.h>
#include <conio.h>
#include<iostream>

using namespace std;

struct node {
	int data;
	struct node * right, * left;
};


void insert(node ** tree, int val)
{
    node *temp = NULL;
    if(!(*tree))
    {
        temp = (node *)malloc(sizeof(node));
        temp->left = temp->right = NULL;
        temp->data = val;
        *tree = temp;
        return;
    }

    if(val < (*tree)->data)
    {
        insert(&(*tree)->left, val);
    }
    else if(val > (*tree)->data)
    {
        insert(&(*tree)->right, val);
    }

}

void print_preorder(node * tree)
{
    if (tree)
    {
        printf("%d ",tree->data);
        print_preorder(tree->left);
        print_preorder(tree->right);
    }

}

void print_inorder(node * tree)
{
    if (tree)
    {
        print_inorder(tree->left);
        printf("%d ",tree->data);
        print_inorder(tree->right);
    }
}

void print_postorder(node * tree)
{
    if (tree)
    {
        print_postorder(tree->left);
        print_postorder(tree->right);
        printf("%d ",tree->data);
    }
}

void deltree(node* tree)
{
    if (tree == NULL) return;
    
        deltree(tree->left);
        deltree(tree->right);
        delete (tree);
    
}

void deleteTree(node** node_ref)  
{  
    deltree(*node_ref);  
    *node_ref = NULL;  
}  

node* search(node ** tree, int val)
{
    if(!(*tree))
    {
        return NULL;
    }

   if(val < (*tree)->data)
    {
        printf("%d ", (*tree)->data);
        search(&((*tree)->left), val);
    }
    else if(val > (*tree)->data)
    {
        printf("%d ", (*tree)->data);
        search(&((*tree)->right), val);
        
    }
    else if(val == (*tree)->data)
    {
        return *tree;
    }
} 

struct node * minValueNode(struct node* node){
   struct node* current = node;
   while (current && current->left != NULL)
      current = current->left;
   return current;
}

struct node* deleteNode(struct node* root, int data){
   if (root == NULL) return root;
      if (data < root->data)
         root->left = deleteNode(root->left, data);
      else if (data > root->data)
         root->right = deleteNode(root->right, data);
   else{
      if (root->left == NULL){
         struct node *temp = root->right;
         free(root);
         return temp;
      }
      else if (root->right == NULL){
         struct node *temp = root->left;
         free(root);
         return temp;
      }
      struct node* temp = minValueNode(root->right);
      root->data = temp->data;
      root->right = deleteNode(root->right, temp->data);
   }
   return root;
}

int maxValue(struct node* node) 
{    
    /* loop down to find the rightmost leaf */
    struct node* current = node; 
    while (current->right != NULL)  
        current = current->right; 
      
    return (current->data); 
} 

int minValue(struct node* node)  
{  
struct node* current = node;  
  
/* loop down to find the leftmost leaf */
while (current->left != NULL)  
{  
    current = current->left;  
}  
return(current->data);  
}  

main()
{
	int angka;
	char pil, cont='y';
    node *root;
    node *tmp;
    //int i;

    root = NULL;
    insert(&root, 9);
    insert(&root, 4);
    insert(&root, 15);
    insert(&root, 6);
    insert(&root, 12);
    insert(&root, 17);
    insert(&root, 2);

	while(cont == 'y' || cont =='Y') {
		
		cout<<"1. INSERT"<<endl;
    	cout<<"2. SEARCH"<<endl;
    	cout<<"3. DELETE"<<endl;
    	cout<<"4. RESET"<<endl;
    	cout<<"5. SHOW Pre-Order"<<endl;
    	cout<<"6. SHOW In-Order"<<endl;
    	cout<<"7. SHOW Post-Order"<<endl;
    	cout<<"8. SHOW MAX NUMBER"<<endl;
    	cout<<"9. SHOW MIN NUMBER"<<endl<<endl;
    	cout<<"Pilihan : ";
    	cin>>pil;
    	
    	 fflush(stdin); 
    
    	
    	if(pil == '1') {
    		cout<<"Masukkan angka: ";
    		cin>>angka;
    		insert(&root, angka);
		}
		else if(pil == '2') {
    		cout<<"Masukkan angka: ";
    		cin>>angka;
    		
    		cout<<"Simpul yang dilewati : ";
			tmp = search(&root, angka);
			if (tmp) {
				printf("Searched node=%d\n", tmp->data);
			}
			else {
				printf("Data Not found in tree.\n");
			}
		}
		else if(pil == '3') {
			cout<<"Masukkan angka : ";
    		cin>>angka;
			root = deleteNode(root, angka);
		}	
		else if(pil == '4') {
			deltree(root);
			root = NULL;
		}	
		else if(pil == '5') {
			
			printf("Pre Order Display\n");
    		print_preorder(root);
    		cout<<endl;
    		
		}
		else if(pil == '6') {
			
			printf("In Order Display\n");
    		print_inorder(root);
    		
    		cout<<endl;
		}
		else if(pil == '7') {
			
			printf("Post Order Display\n");
    		print_postorder(root);
    		
    		cout<<endl;
		}
		else if(pil == '8') {
    		cout << "Maximum value in BST is " << maxValue(root); 	
    		cout<<endl;
		}
		else if(pil == '9') {
    		cout << "Minim value in BST is " << minValue(root); 
    		cout<<endl;
		}
	}
}

